 //以下是tradehandler.h文件
 
 #include "ThostFtdcTraderApi.h"
 
 #include "traderApi.h"
 
 #include <string.h>
 
 #include <stdio.h>
 
 #include <Windows.h>
 
  
 
 class CTraderHandler : public CThostFtdcTraderSpi
 
 {
 
 private:
 
   CThostFtdcTraderApi *m_ptraderapi;
 
  
 
 public:
 
   void connect()
 
   {
 
       //创建API实例
 
       m_ptraderapi = CThostFtdcTraderApi::CreateFtdcTraderApi(".//flow/"); //必须提前创建好flow目录，流文件*.con就会在该文件夹下面创建，如果想要区别不同session创建的流水文件名称可见如下示例“.//flow/a_”
 
       m_ptraderapi->RegisterSpi(this);
 
       m_ptraderapi->SubscribePublicTopic(THOST_TERT_QUICK);
 
       m_ptraderapi->SubscribePrivateTopic(THOST_TERT_QUICK); //设置私有流订阅模式
 
       m_ptraderapi->RegisterFront("tcp://127.0.0.1:41205");
 
       m_ptraderapi->Init();
 
       //输出API版本信息
 
       printf("%s\n", m_ptraderapi->GetApiVersion());
 
   }
 
  
 
   //释放
 
   void release()
 
   {
 
       m_ptraderapi->Release();
 
   }
 
  
 
   //登陆
 
   void login()
 
   {
 
       CThostFtdcReqUserLoginField t = {0};
 
       strcpy_s(t.BrokerID, "1701");
 
       strcpy_s(t.UserID, "1701_admin");
 
       strcpy_s(t.Password, "1701_admin");
 
       while (m_ptraderapi->ReqUserLogin(&t, 1)!=0)   Sleep(1000);
 
   }
 
  
 
   //结算单确认
 
   void settlementinfoConfirm()
 
   {
 
       CThostFtdcSettlementInfoConfirmField t = {0};
 
       strcpy_s(t.BrokerID, "1701");
 
       strcpy_s(t.InvestorID, "00001");
 
       while (m_ptraderapi->ReqSettlementInfoConfirm(&t, 2)!=0)  Sleep(1000);
 
   }
     
      
     
       //报单
     
       void orderinsert()
     
       {
     
           CThostFtdcInputOrderField t = { 0 };
     
           strcpy_s(t.BrokerID, "9999");
     
           strcpy_s(t.InvestorID, "00001");
     
           strcpy_s(t.UserID, "00001");
     
           t.Direction = THOST_FTDC_D_Buy;
     
           t.CombOffsetFlag[0] = THOST_FTDC_OF_Open;
     
           t.CombHedgeFlag[0] = THOST_FTDC_HF_Speculation;
     
           t.ContingentCondition = THOST_FTDC_CC_Immediately;
 
           strcpy_s(t.InstrumentID, "sc1807");
     
           t.ForceCloseReason = THOST_FTDC_FCC_NotForceClose;
     
           t.LimitPrice = 490;
     
           t.OrderPriceType = THOST_FTDC_OPT_LimitPrice;
     
           t.VolumeCondition = THOST_FTDC_VC_AV;
     
           t.TimeCondition = THOST_FTDC_TC_GFD;
     
           t.VolumeTotalOriginal = 1;
     
           strcpy_s(t.OrderRef, "0000001");
 
           strcpy_s(t.ExchangeID, "INE");
     
           while (m_ptraderapi->ReqOrderInsert(&t, 3) != 0) Sleep(1000);
     
       }
     
       //查询合约
     
       void qryInstrument()
     
       {
     
           CThostFtdcQryInstrumentField t = { 0 };
     
           strcpy_s(t.ExchangeID, "SHFE");
     
           strcpy_s(t.InstrumentID, "zn1803");
     
           while (m_ptraderapi->ReqQryInstrument(&t, 4) != 0) Sleep(1000);
     
       }
     
      
     
     //前置连接响应
     
       void OnFrontConnected()
     
       {
     
           printf("OnFrontConnected\n");
     
       }
     
      
     
       //登陆请求响应
     
       void OnRspUserLogin(CThostFtdcRspUserLoginField *pRspUserLogin, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
     
       {
     
           printf("OnRspUserLogin\n");
     
       }
     
      
     
       //结算单确认响应
     
       void OnRspSettlementInfoConfirm(CThostFtdcSettlementInfoConfirmField *pSettlementInfoConfirm, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
     
       {
     
           printf("OnRspSettlementInfoConfirm\n");
     
       }
     
      
     
       //查询合约响应
     
       void OnRspQryInstrument(CThostFtdcInstrumentField *pInstrument, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
     
       {
     
           printf("OnRspQryInstrument\n");
     
       }
      
     
       //报单通知
     
       void OnRtnOrder(CThostFtdcOrderField *pOrder)
     
       {
     
           printf("OnRtnOrder\n");
     
       }
     
       
     
       //成交通知
     
       void OnRtnTrade(CThostFtdcTradeField *pTrade)
     
       {
     
           printf("OnRtnTrade\n");
     
       }
     
      
     
       //报单录入请求响应
     
       void OnRspOrderInsert(CThostFtdcInputOrderField *pInputOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
     
       {
     
           printf("OnRspOrderInsert\n");
     
       }
     
       
     
       //错误应答
     
       void OnRspError(CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
     
       {
     
           printf("OnRspError\n");
     
       }
     
     };
     
     //以下是main.cpp文件 
     
     #include "tradehandler.h"
     
     int main(int argc, char *argv[])
     
     {
     
       CTraderHandler *trader = new CTraderHandler();
     
       trader->connect();
     
       Sleep(2000);
     
       trader->login();
     
       Sleep(2000);
     
       trader->settlementinfoConfirm();
     
       Sleep(2000);
     
       trader->qryInstrument();
     
       Sleep(2000);
     
       trader->orderinsert();
     
       Sleep(INFINITE);
     
       return 1;
     
     }
